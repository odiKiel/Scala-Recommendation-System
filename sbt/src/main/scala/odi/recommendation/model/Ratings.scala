package odi.recommendation
import scala.slick.driver.PostgresDriver.simple._
import Database.threadLocalSession


 // Definition of the USER_ITEMS table
case class Rating(id: Option[Int] = None, itemId: Int, userId: Int, rating: Int)
object Ratings extends Table[Rating]("ratings") {
  def id = column[Int]("id", O.PrimaryKey, O.AutoInc) // This is the primary key column
  def itemId = column[Int]("item_id") 
  def userId = column[Int]("user_id")
  def rating = column[Int]("rating")
  def * = id.? ~ itemId ~ userId ~ rating <>(Rating, Rating.unapply _)
  def noID = itemId ~ userId ~ rating

  // A reified foreign key relation that can be navigated to create a join
  def user = foreignKey("user_fk", userId, Users)(_.id)
  def item = foreignKey("item_fk", itemId, Items)(_.id)

  lazy val db = Database.forURL("jdbc:postgresql://localhost/recommendation",
                         driver="org.postgresql.Driver",
                         user="oliver_diestel",
                         password="")
                       
  /*
                       .withSession {

    Ratings.ddl.create

    Ratings.insert(Rating(None, 1, 1, 4))
  }
    */

  def createTable = {
    db.withSession {
      Ratings.ddl.create
    } 

  }

  def getByUser(uid: Int) : Option[List[Rating]] = {
    var result:Option[List[Rating]] = None;

    db withSession {
        // define the query and what we want as result
    	val query = for (u <-Ratings if u.userId === uid) yield u.id ~ u.itemId ~ u.userId ~ u.rating 

    	// map the results to a Bid object
    	val inter = query mapResult {
    	  case(id, itemId, userId, rating) => Option(Rating(Option(id), itemId, userId, rating));
    	}

    	// check if there is one in the list and return it, or None otherwise
      if(inter.list != Nil){
        result = Some(inter.list.flatten) 
      }
      result
    }

    // return the found bid
    result
  }

  def getByItemUser(iid: Int, uid: Int) : Option[Rating] = {
    var result:Option[Rating] = None;

    db withSession {
        // define the query and what we want as result
    	val query = for (r <-Ratings if r.userId === uid && r.itemId === iid) yield r.id ~ r.itemId ~ r.userId ~ r.rating 

    	// map the results to a Bid object
    	val inter = query mapResult {
    	  case(id, itemId, userId, rating) => Option(Rating(Option(id), itemId, userId, rating));
    	}

    	// check if there is one in the list and return it, or None otherwise
    	result = inter.list match {
    	  case _ :: tail => inter.first
    	  case Nil => None
    	}

    }

    // return the found bid
    result
  }

 
  def get(rid: Int) : Option[Rating] = {
    var result:Option[Rating] = None;

    db withSession {
        // define the query and what we want as result
    	val query = for (u <-Ratings if u.id === rid) yield u.id ~ u.itemId ~ u.userId ~ u.rating 

    	// map the results to a Bid object
    	val inter = query mapResult {
    	  case(id, itemId, userId, rating) => Option(Rating(Option(id), itemId, userId, rating))
    	}

    	// check if there is one in the list and return it, or None otherwise
    	result = inter.list match {
    	  case _ :: tail => inter.first
    	  case Nil => None
    	}
    }

    // return the found bid
    result
  }


  /**
   * Create a bid using scala query. This will always create a new bid
   */
  def create(rating: Rating): Rating = {
    var id: Int = -1;

    // start a db session
    db withSession {
      // create a new bid
      val res = Ratings.noID insert (rating.itemId.intValue, rating.userId.intValue, rating.rating.intValue)
      // get the autogenerated bid
      val idQuery = Query(SimpleFunction.nullary[Int]("LASTVAL"))
      id = idQuery.list().head
    }
    // create a bid to return
    new Rating(Option(id), rating.itemId, rating.userId, rating.rating)
  }

  /**
   * Delete a bid
   */
  def delete(rid: Int) : Option[Rating] = {
    // get the bid we're deleting
    val result = get(rid);

    // delete the bid
    val toDelete = Ratings where (_.id === rid)
    db withSession {
      toDelete.delete
    }

    // return deleted bid
    result
  }
  def deleteAll = {
    all.foreach((u: Rating) => delete(u.id.get))
  }

  def first : Option[Rating] = {
    db withSession {
      val q = Ratings.map{ u => u}.take(1)
      q.list.headOption
    }
  }

  def all : List[Rating] = {
    db withSession {
      val q = Ratings.map{u => u}
      q.list
    }
  }



}
