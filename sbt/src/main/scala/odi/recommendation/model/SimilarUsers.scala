package odi.recommendation
import scala.slick.driver.PostgresDriver.simple._
import Database.threadLocalSession


case class SimilarUser(id: Option[Int] = None, userOneId: Int, userTwoId: Int, similarity: Double) 
{
  def similarityByUserId(userId: Int): Option[(User, Double)] = {
    if(userId == userOneId) {
      Some((Users.get(userTwoId).get, similarity))
    }
    else {
      if(userId == userTwoId) {
        Some((Users.get(userOneId).get, similarity))
      }
      else {
        None
      }
    }
  }
}

object SimilarUsers extends Table[SimilarUser]("similar_users") with VectorCalculation {
  def id = column[Int]("id", O.PrimaryKey, O.AutoInc) // This is the primary key column
  def userOneId = column[Int]("user_one_id") 
  def userTwoId = column[Int]("user_two_id")
  def similarity = column[Double]("similarity")
  def * = id.? ~ userOneId ~ userTwoId ~ similarity <>(SimilarUser, SimilarUser.unapply _)
  def noID = userOneId ~ userTwoId ~ similarity

  // A reified foreign key relation that can be navigated to create a join
  def userOne = foreignKey("user_one_fk", userOneId, Users)(_.id)
  def userTwo = foreignKey("user_two_fk", userTwoId, Users)(_.id)

  lazy val db = Database.forURL("jdbc:postgresql://localhost/recommendation",
                         driver="org.postgresql.Driver",
                         user="oliver_diestel",
                         password="")
                       
  /*
                       .withSession {

    Ratings.ddl.create

    Ratings.insert(Rating(None, 1, 1, 4))
  }
    */

  def createTable = {
    db.withSession {
      SimilarUsers.ddl.create
    } 

  }
 
  def get(sid: Int) : Option[SimilarUser] = {
    var result:Option[SimilarUser] = None;

    db withSession {
        // define the query and what we want as result
    	val query = for (s <-SimilarUsers if s.id === sid) yield s.id ~ s.userOneId ~ s.userTwoId ~ s.similarity 

    	
    	val inter = query mapResult {
    	  case(id, userOneId, userTwoId, similarity) => Option(SimilarUser(Option(id), userOneId, userTwoId, similarity))
    	}

    	// check if there is one in the list and return it, or None otherwise
    	result = inter.list match {
    	  case _ :: tail => inter.first
    	  case Nil => None
    	}
    }

    // return the found bid
    result
  }

  def first : Option[SimilarUser] = {
    db withSession {
      val q = SimilarUsers.map{ u => u}.take(1)
      q.list.headOption
    }
  }

  def byUserId(userId: Int, amount: Int) : List[SimilarUser] = {

    db withSession {
        // define the query and what we want as result
    	val query = for (s <-SimilarUsers if s.userOneId === userId || s.userTwoId === userId) yield s.id ~ s.userOneId ~ s.userTwoId ~ s.similarity 

    	
    	val inter = query.take(amount) mapResult {
    	  case(id, userOneId, userTwoId, similarity) => SimilarUser(Option(id), userOneId, userTwoId, similarity)
    	}

    	// check if there is one in the list and return it, or None otherwise
    	inter.list 
    }

  }


  def getByUserUser(user1Id: Int, user2Id: Int) : Option[SimilarUser] = {
    var result:Option[SimilarUser] = None;

    db withSession {
        // define the query and what we want as result
    	val query = for (s <-SimilarUsers if s.userOneId === user1Id && s.userTwoId === user2Id || s.userOneId === user2Id && s.userTwoId === user1Id) yield s.id ~ s.userOneId ~ s.userTwoId ~ s.similarity 

    	
    	val inter = query mapResult {
    	  case(id, userOneId, userTwoId, similarity) => Option(SimilarUser(Option(id), userOneId, userTwoId, similarity))
    	}

    	// check if there is one in the list and return it, or None otherwise
    	result = inter.list match {
    	  case _ :: tail => inter.first
    	  case Nil => None
    	}
    }

    // return the found bid
    result
  }

  def all : List[SimilarUser] = {
    db withSession {
      val q = SimilarUsers.map{u => u}
      q.list
    }
  }


  /**
   * Create similarUser if it doesnt exist or update if it has a new value
   * todo check if threashold is good
   */
  def createOrUpdate(similarUser: SimilarUser): SimilarUser = {
    val oldSimilarUser: Option[SimilarUser] = getByUserUser(similarUser.userOneId, similarUser.userTwoId)
    if(oldSimilarUser == None || Math.abs(oldSimilarUser.get.similarity - similarUser.similarity) > 0.01) {
      var id: Int = -1;

      // start a db session
      db withSession {
        // create a new bid
        val res = SimilarUsers.noID insert (similarUser.userOneId.intValue, similarUser.userTwoId.intValue, similarUser.similarity.floatValue)
        // get the autogenerated bid
        val idQuery = Query(SimpleFunction.nullary[Int]("LASTVAL"))
        id = idQuery.list().head
      }
      // create a bid to return
      new SimilarUser(Option(id), similarUser.userOneId, similarUser.userTwoId, similarUser.similarity)
    }
    else {
      oldSimilarUser.get
    }
  }

  /**
   * Delete a bid
   */
  def delete(sid: Int) : Option[SimilarUser] = {
    // get the bid we're deleting
    val result = get(sid);

    // delete the bid
    val toDelete = SimilarUsers where (_.id === sid)
    db withSession {
      toDelete.delete
    }

    // return deleted bid
    result
  }

  def calculateSimilarity(similarMatrix: Array[Array[Double]]) = {
    val allUsers = Users.all
    for(i <- (0 until allUsers.length-1);
        j <- (i+1 until allUsers.length)) {
      SimilarUsers.createOrUpdate(
        SimilarUser(
          None, 
          allUsers(i).id.get, 
          allUsers(j).id.get, 
          cosinusSimilarity(similarMatrix(i).toVector, similarMatrix(j).toVector)
        )
      )
    }
  }


  def deleteAll = {
    db withSession {
      val q = for { 
        t <- SimilarUsers 
      } yield t 

      q.mutate(_.delete) // deletes rows corresponding to query result 
    }
  }

}
