package odi.recommendation
import scala.slick.driver.PostgresDriver.simple._
import Database.threadLocalSession


 // Definition of the USER_ITEMS table
case class SimilarItem(id: Option[Int] = None, itemOneId: Int, itemTwoId: Int, similarity: Float)
object SimilarItems extends Table[SimilarItem]("similar_items") {
  def id = column[Int]("id", O.PrimaryKey, O.AutoInc) // This is the primary key column
  def itemOneId = column[Int]("item_one_id") 
  def itemTwoId = column[Int]("item_two_id")
  def similarity = column[Float]("similarity")
  def * = id.? ~ itemOneId ~ itemTwoId ~ similarity <>(SimilarItem, SimilarItem.unapply _)
  def noID = itemOneId ~ itemTwoId ~ similarity

  // A reified foreign key relation that can be navigated to create a join
  def itemOne = foreignKey("item_one_fk", itemOneId, Items)(_.id)
  def itemTwo = foreignKey("item_two_fk", itemTwoId, Items)(_.id)

  lazy val db = Database.forURL("jdbc:postgresql://localhost/recommendation",
                         driver="org.postgresql.Driver",
                         user="oliver_diestel",
                         password="")
                       
  /*
                       .withSession {

    Ratings.ddl.create

    Ratings.insert(Rating(None, 1, 1, 4))
  }
    */

  def createTable = {
    db.withSession {
      SimilarItems.ddl.create
    } 

  }
 
  def get(sid: Int) : Option[SimilarItem] = {
    var result:Option[SimilarItem] = None;

    db withSession {
        // define the query and what we want as result
    	val query = for (s <-SimilarItems if s.id === sid) yield s.id ~ s.itemOneId ~ s.itemTwoId ~ s.similarity 

    	
    	val inter = query mapResult {
    	  case(id, itemOneId, itemTwoId, similarity) => Option(SimilarItem(Option(id), itemOneId, itemTwoId, similarity))
    	}

    	// check if there is one in the list and return it, or None otherwise
    	result = inter.list match {
    	  case _ :: tail => inter.first
    	  case Nil => None
    	}
    }

    // return the found bid
    result
  }


  /**
   * Create a bid using scala query. This will always create a new bid
   */
  def create(similarItem: SimilarItem): SimilarItem = {
    var id: Int = -1;

    // start a db session
    db withSession {
      // create a new bid
      val res = SimilarItems.noID insert (similarItem.itemOneId.intValue, similarItem.itemTwoId.intValue, similarItem.similarity.floatValue)
      // get the autogenerated bid
      val idQuery = Query(SimpleFunction.nullary[Int]("LASTVAL"))
      id = idQuery.list().head
    }
    // create a bid to return
    new SimilarItem(Option(id), similarItem.itemOneId, similarItem.itemTwoId, similarItem.similarity)
  }

  /**
   * Delete a bid
   */
  def delete(sid: Int) : Option[SimilarItem] = {
    // get the bid we're deleting
    val result = get(sid);

    // delete the bid
    val toDelete = SimilarItems where (_.id === sid)
    db withSession {
      toDelete.delete
    }

    // return deleted bid
    result
  }

  def calculateSimilarity(item: Item, similar: collection.mutable.HashMap[Item, collection.mutable.LinkedList[User]]): Double = {
    //create all the rating vectors for the item / userItem tupel
    0.447
  }


}
