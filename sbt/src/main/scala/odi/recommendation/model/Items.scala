package odi.recommendation
import scala.slick.driver.PostgresDriver.simple._
import Database.threadLocalSession

import net.liftweb.json._
import net.liftweb.json.Serialization.{read, write}
import net.liftweb.json.JsonDSL._
// Definition of the ITEMS table
case class Item(id: Option[Int] = None, title: String) extends ToJson{
  def similarItems: List[(Int, Double)] = {
    SimilarItems.byItemId(this.id.get)
  }
  def toJson = {
    val json = ("id"->id.get)~("title"->title)
    compact(render(json))
  }

}
object Items extends Table[Item]("items") with ModelTrait{
  def id = column[Int]("id", O.PrimaryKey, O.AutoInc) // This is the primary key column
  def title = column[String]("title")
  def * = id.? ~ title <>(Item, Item.unapply _)
  def noID = title 

  def createTable = {
    db.withSession {
      Items.ddl.create
    } 
  }

  def get(id: Int) : Option[Item] = {
    var result:Option[Item] = None;

    db withSession {
        // define the query and what we want as result
    	val query = for (i <-Items if i.id === id) yield i.id ~ i.title 

    	// map the results to a Bid object
    	val inter = query mapResult {
    	  case(id, title) => Option(Item(Option(id), title))
    	}

    	// check if there is one in the list and return it, or None otherwise
    	result = inter.list match {
    	  case _ :: tail => inter.first
    	  case Nil => None
    	}
    }

    // return the found bid
    result
  }

  def all : List[Item] = {
    db withSession {
      val q = Items.map({u => u}).sortBy(_.id)
      q.list
    }
  }

  def allIds : List[Int] = {
    db withSession {
        // define the query and what we want as result
    	val query = for (r <-Items) yield r.id

    	// map the results to a Bid object
      val inter = query mapResult {
    	  case(id) => id
    	}

    	// check if there is one in the list and return it, or None otherwise
      inter.list
    }
  }

  //get all items from a specific user
  def allItemIdsUserId(userId: Int) : List[Int] = {
    db withSession {
        // define the query and what we want as result
    	val query = for (r <-Ratings if r.userId === userId;
                       i <- Items if i.id === r.itemId) yield i.id 

    	// map the results to a Bid object
    	val inter = query mapResult {
    	  case(id) => id
    	}

    	// check if there is one in the list and return it, or None otherwise
      inter.list
    }
  }

  def allItemIdsForUserIdWithRating(userId: Int) : List[(Int, Int)] = {
    db withSession {
        // define the query and what we want as result
    	val query = for (r <-Ratings if r.userId === userId;
                       i <- Items if i.id === r.itemId) yield i.id ~ r.rating 

    	// map the results to a Bid object
    	val inter = query mapResult {
    	  case(id, rating) => (id, rating)
    	}

    	// check if there is one in the list and return it, or None otherwise
      inter.list
    }
  }

  def allItemIdsForUserIdWithRatingNormalized(userId: Int) : List[(Int, Double)] = {
    db withSession {
        // define the query and what we want as result
    	val query = for (r <-Ratings if r.userId === userId;
                       u <- Users if u.id === userId;
                       i <- Items if i.id === r.itemId) yield i.id ~ r.rating ~ u.averageRating

    	// map the results to a Bid object
    	val inter = query mapResult {
    	  case(id, rating, averageRating) => (id, rating-averageRating)
    	}

    	// check if there is one in the list and return it, or None otherwise
      inter.list
    }
  }


  def first : Option[Item] = {
    db withSession {
      val q = Items.map{ u => u}.take(1)
      q.list.headOption
    }
  }

  /**
   * Create a bid using scala query. This will always create a new bid
   */
  def create(item: Item): Item = {
    var id: Int = -1;

    // start a db session
    db withSession {
      // create a new bid
      val res = Items.noID insert (item.title)
      // get the autogenerated bid
      val idQuery = Query(SimpleFunction.nullary[Int]("LASTVAL"))
      id = idQuery.list().head
    }
    // create a bid to return
    new Item(Option(id), item.title)
  }


  /**
   * Delete a bid
   */
  def delete(id: Int) : Option[Item] = {
    val result = get(id);

    //delete ratings and similaritems with this id
    Ratings.deleteByItemId(id)
    SimilarItems.deleteByItemId(id)

    val toDelete = Items where (_.id === id)
    db withSession {
      toDelete.delete
    }

    result
  }

  def deleteAll = {
    db withSession {
      val q = for { 
        t <- Items 
      } yield t 

      q.mutate(_.delete) // deletes rows corresponding to query result 
    }
  }
}

